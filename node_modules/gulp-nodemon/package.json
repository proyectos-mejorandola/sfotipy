{
  "name": "gulp-nodemon",
  "version": "1.0.4",
  "description": "A gulp-friendly nodemon wrapper that restarts your app as you develop, and keeps your build system contained to one process.",
  "main": "index.js",
  "scripts": {
    "test": "gulp test"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/JacksonGariety/gulp-nodemon.git"
  },
  "keywords": [
    "gulp",
    "nodemon",
    "develop",
    "server",
    "restart",
    "automatically",
    "watch",
    "gulpfriendly"
  ],
  "author": {
    "name": "Jackson Gariety"
  },
  "license": "BSD-2-Clause",
  "bugs": {
    "url": "https://github.com/JacksonGariety/gulp-nodemon/issues"
  },
  "homepage": "https://github.com/JacksonGariety/gulp-nodemon",
  "dependencies": {
    "nodemon": "^1.2.0",
    "event-stream": "^3.1.5",
    "colors": "^0.6.2"
  },
  "devDependencies": {
    "gulp": "^3.7.0",
    "should": "^4.0.0",
    "gulp-jshint": "^1.6.1",
    "gulp-mocha": "^0.2.0",
    "is-running": "^1.0.3",
    "coffee-script": "^1.7.1"
  },
  "directories": {
    "test": "test"
  },
  "readme": "gulp-nodemon\n===========\n\nA gulp-friendly nodemon wrapper that restarts your app as you develop, and keeps your build system contained to one process.\n\nPerfect for development.\n\n## Usage\n\n### **nodemon([options])**\n\nYou can pass an object to gulp-nodemon with options [specified in nodemon config](https://github.com/remy/nodemon#config-files).\n\nExample below will start `server.js` in `development` mode and watch for changes, as well as watch all `.html` and `.js` files in the directory.\n```javascript\n{\n  script: 'server.js'\n, ext: 'js html'\n, env: { 'NODE_ENV': 'development' }\n}\n```\n\ngulp-nodemon returns a stream just like any other NodeJS stream, **except for the `on` method**, which conveniently takes gulp task names to execute.\n\n### **.on([event], [tasks])**\n\n1. `[event]` is an event name as a string. See [nodemon events](https://github.com/remy/nodemon/blob/master/doc/events.md). (gulp-nodemon also provides a new event, `'change'`, which fires before the server restarts so that you can run your compile tasks all within the same gulp process.)\n2. `[tasks]` A gulp task name, array of gulp task names, or a function to execute.\n\n### **--debug**\n\nYou can also pass the debug flag to nodemon through the `nodeArgs` option\n\nExample below will start `server.js` in `development` with `--debug` flag.\n```javascript\n{ \n  script: 'app.js', \n  ext: 'js html', \n  env: { 'NODE_ENV': 'development' } , \n  ignore: ['./build/**'], \n  nodeArgs: ['--debug'] \n}\n```\n\nYou can also specify a custom debug port:\n```javascript\nnodeArgs: ['--debug=9999']\n```\n\n## Example\n\nThe following example will run your code with nodemon, lint it when your it change, then log a message when it nodemon runs it again.\n\n```javascript\n// Gulpfile.js\nvar gulp = require('gulp')\n  , nodemon = require('gulp-nodemon')\n  , jshint = require('gulp-jshint')\n\ngulp.task('lint', function () {\n  gulp.src('./**/*.js')\n    .pipe(jshint())\n})\n\ngulp.task('develop', function () {\n  nodemon({ script: 'server.js', ext: 'html js', ignore: ['ignored.js'] })\n    .on('change', ['lint'])\n    .on('restart', function () {\n      console.log('restarted!')\n    })\n})\n```\n",
  "readmeFilename": "README.md",
  "_id": "gulp-nodemon@1.0.4",
  "_from": "gulp-nodemon@"
}
